!%------------------------------------------------------------------------%
!|  Copyright (C) 2013 - 2018:                                            |
!|  Fluid Mechanics Laboratory (Shaqfeh's Group)                          |
!|  Stanford University                                                   |
!|  Material Research and Innovation Laboratory                           |
!|  University of Tennessee-Knoxville                                     |
!|  Author:    Amir Saadat        <asaadat@stanford.edu>                  |
!|  Advisor:   Eric S. G. Shaqfeh <esgs@stanford.edu>                     |
!|             Bamin Khomami      <bkhomami@utk.edu>                      |
!|                                                                        |
!|  This file is part of BDpack.                                          |
!|                                                                        |
!|  BDpack is a free software: you can redistribute it and/or modify      |
!|  it under the terms of the GNU General Public License as published by  |
!|  the Free Software Foundation, either version 3 of the License, or     |
!|  (at your option) any later version.                                   |
!|                                                                        |
!|  BDpack is distributed in the hope that it will be useful,             |
!|  but WITHOUT ANY WARRANTY; without even the implied warranty of        |
!|  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         |
!|  GNU General Public License for more details.                          |
!|                                                                        |
!|  You should have received a copy of the GNU General Public License     |
!|  along with BDpack.  If not, see <http://www.gnu.org/licenses/>.       |
!%------------------------------------------------------------------------%
!--------------------------------------------------------------------
!
! MODULE: verlet
!
!> @author
!> Amir Saadat, Stanford University, August 2018
!
! DESCRIPTION: construction of verlet list
!>
!
!--------------------------------------------------------------------

module evverlet_cumod

  use :: prcn_mod
  use :: cudafor

  implicit none

  ! Private module procedures:
  private :: init_verlet_t,&
             init_clllst  ,&
             print_ncps   ,&
             print_mbpc   ,&
             get_nct      ,&
             get_mbpc     ,&
             cnstr_clllst ,&
             ! cnstr_nab_d  ,&
             del_verlet_t

  !> A public type for constructing verlet list
  type evverlet_cu_t

    private
    !> The number of the cells per side
    integer :: ncps(3)
    !> Total number of cells in the cubic box
    integer :: nct
    !> The dimension of the cells in each direction
    real(wp) :: cll_sz(3)
    !> The volume of the cells
    real(wp) :: cll_vol
    !> Maximum number of beads per cell
    integer :: mbpc
    !> Maximum number of beads for all neighboring cells
    integer :: mbpct
    !> The array which contains the number of beads in cells
    integer,allocatable :: head(:)
    !> The array which contains the beads index in cells
    integer,allocatable :: binc(:,:)
    !> The array which contains the neighboring cell list
    integer,allocatable :: nclst(:,:)
    !> Maximum occupancy of the cells
    integer :: mocc
    ! !> i index in all possible interactions
    ! integer,allocatable :: iidx(:)
    ! !> j index in all possible interactions
    ! integer,allocatable :: jidx(:)
    ! !> An array for keeping track of interactions of interest
    ! logical,allocatable :: inside(:)
    ! !> The x-component of vector between beads with indices i,j
    ! real(wp),allocatable :: Rijx(:)
    ! !> The y-component of vector between beads with indices i,j
    ! real(wp),allocatable :: Rijy(:)
    ! !> The temporary y-component of vector between beads with indices i,j
    ! real(wp),allocatable :: Rijytmp(:)
    ! !> The z-component of vector between beads with indices i,j
    ! real(wp),allocatable :: Rijz(:)
    ! !> The squared distance between beads with indices i,j
    ! real(wp),allocatable :: Rijsq(:)
    ! !> Total number of interactions possible
    ! integer :: num_int
    !> The x-component of position vector on host
    real(wp),allocatable :: Rbx_h(:)
    !> The y-component of position vector on host
    real(wp),allocatable :: Rby_h(:)
    !> The z-component of position vector on host
    real(wp),allocatable :: Rbz_h(:)
    !> The array which contains the beads index in cells on device
    integer,device,allocatable :: binc_d(:,:)
    !> The array which contains the neighboring cell list on device
    integer,device,allocatable :: nclst_d(:,:)

  contains

    procedure,pass(this) :: init => init_verlet_t
    procedure,pass(this) :: init_cll => init_clllst
    procedure,pass(this) :: cnstr_nab => cnstr_nablst
    procedure,pass(this) :: cnstr_cll => cnstr_clllst
    procedure,pass(this) :: print_ncps
    procedure,pass(this) :: print_mbpc
    procedure,pass(this) :: get_nct
    procedure,pass(this) :: get_mbpc
    final :: del_verlet_t

  end type evverlet_cu_t
    !> The array which contains the number of beads in cells
    integer,allocatable :: head(:)


  ! Private module variables:
  ! private :: cll_dns_ev,nnc,shifts,j_clx,j_cly,j_clz,j_cll,Rbx_tex,Rby_tex,Rbz_tex
  private :: cll_dns_ev,nnc,Rbx_tex,Rby_tex,Rbz_tex
  ! Protected module variables:
!  protected ::

  !> The density of particles in a cell
  real(wp),save :: cll_dns_ev
  !> Number of neighbering cells
  integer,save :: nnc
  ! !> The neighboring cells offset
  ! integer,allocatable,save :: shifts(:,:)
  ! !> The coordinates for neighboring cells
  ! integer,allocatable :: j_clx(:),j_cly(:),j_clz(:),j_cll(:)


  !> Texture memory pointers for x-direction coordinates
  real(wp),texture,pointer :: Rbx_tex(:)
  !> Texture memory pointers for y-direction coordinates
  real(wp),texture,pointer :: Rby_tex(:)
  !> Texture memory pointers for y-direction coordinates
  real(wp),texture,pointer :: Rbz_tex(:)


contains

  !> Initializes the verlet module
  !! \param id The rank of the process
  subroutine init_evverlet_d()

    use :: arry_mod, only: print_vector
    use :: flow_mod, only: FlowType
    use :: strg_mod
    use,intrinsic :: iso_fortran_env
    use :: cmn_io_mod, only: read_input

    ! integer,intent(in) :: id
    ! integer :: il,j,ntokens,u1,stat,ios
    ! character(len=1024) :: line
    ! character(len=100) :: tokens(50)

!     open (newunit=u1,action='read',file='input.dat',status='old')
!     il=1
! ef: do
!       read(u1,'(A)',iostat=stat) line
!       if (stat == iostat_end) then
!         exit ef ! end of file
!       elseif (stat > 0) then
!         print '(" io_mod: Error reading line ", i0, " Process ID ", i0)', il,id
!         stop
!       else
!         il=il+1
!       end if
!       call parse(line,': ',tokens,ntokens)
!       if (ntokens > 0) then
!         do j=1,ntokens
!           if(trim(adjustl(tokens(j))) == 'cll_dns') then
!             call value(tokens(j+1),cll_dns,ios)
!           end if
!         end do ! j
!       end if ! ntokens
!     end do ef
!     close(u1)

#ifdef Debuge_sequence
    write(*,*) "module:evverlet_cumod:init_evverlet_d"
#endif

    call read_input('cll-dns-ev',0,cll_dns_ev,0.1_wp)

    select case (FlowType)

      case ('Equil','PSF')
        nnc=27
!         allocate(shifts(nnc,3))
!         shifts(1,:) =[ 0, 0,-1]
!         shifts(2,:) =[ 1, 0,-1]
!         shifts(3,:) =[ 1, 0, 0]
!         shifts(4,:) =[ 1, 0, 1]
!         shifts(5,:) =[-1, 1,-1]
!         shifts(6,:) =[ 0, 1,-1]
!         shifts(7,:) =[ 1, 1,-1]
!         shifts(8,:) =[-1, 1, 0]
!         shifts(9,:) =[ 0, 1, 0]
!         shifts(10,:)=[ 1, 1, 0]
!         shifts(11,:)=[-1, 1, 1]
!         shifts(12,:)=[ 0, 1, 1]
!         shifts(13,:)=[ 1, 1, 1]

!         shifts(14,:)=[ 0, 0, 0]

!         shifts(15:27,:) = - shifts(1:13,:)

      case ('PEF')
        nnc=63
!         allocate(shifts(nnc,3))
!         shifts(1,:) =[ 0, 0,-1]
!         shifts(2,:) =[ 1, 0,-1]
!         shifts(3,:) =[ 2, 0,-1]
!         shifts(4,:) =[ 3, 0,-1]
!         shifts(5,:) =[ 1, 0, 0]
!         shifts(6,:) =[ 2, 0, 0]
!         shifts(7,:) =[ 3, 0, 0]
!         shifts(8,:) =[ 1, 0, 1]
!         shifts(9,:) =[ 2, 0, 1]
!         shifts(10,:)=[ 3, 0, 1]
!         shifts(11,:)=[-3, 1,-1]
!         shifts(12,:)=[-2, 1,-1]
!         shifts(13,:)=[-1, 1,-1]
!         shifts(14,:)=[ 0, 1,-1]
!         shifts(15,:)=[ 1, 1,-1]
!         shifts(16,:)=[ 2, 1,-1]
!         shifts(17,:)=[ 3, 1,-1]
!         shifts(18,:)=[-3, 1, 0]
!         shifts(19,:)=[-2, 1, 0]
!         shifts(20,:)=[-1, 1, 0]
!         shifts(21,:)=[ 0, 1, 0]
!         shifts(22,:)=[ 1, 1, 0]
!         shifts(23,:)=[ 2, 1, 0]
!         shifts(24,:)=[ 3, 1, 0]
!         shifts(25,:)=[-3, 1, 1]
!         shifts(26,:)=[-2, 1, 1]
!         shifts(27,:)=[-1, 1, 1]
!         shifts(28,:)=[ 0, 1, 1]
!         shifts(29,:)=[ 1, 1, 1]
!         shifts(30,:)=[ 2, 1, 1]
!         shifts(31,:)=[ 3, 1, 1]

!         shifts(32,:)=[ 0, 0, 0]

!         shifts(33:63,:) = - shifts(1:31,:)

! !        this%ncps(1:2)=bs(1:2)/(sqrt(10._wp)*rc_F)
! !        this%ncps(3)=bs(3)/rc_F
    end select

!     allocate(j_clx(nnc))
!     allocate(j_cly(nnc))
!     allocate(j_clz(nnc))
!     allocate(j_cll(nnc))

  end subroutine init_evverlet_d

  !> Constructor for  verlet type
  !! \param rc The cutoff radius
  !! \param bs The dimension of the box
  subroutine init_verlet_t(this,rc,bs,ntotbead,nlst_d)

    class(evverlet_cu_t),intent(inout) :: this
    real(wp),intent(in) :: rc,bs(3)
    integer,intent(in) :: ntotbead
    integer,device,allocatable,intent(inout) :: nlst_d(:,:)
	
#ifdef Debuge_sequence
    write(*,*) "module:evverlet_cumod:init_evverlet_t"
#endif

    this%ncps=0
    call this%init_cll(rc,bs,ntotbead,nlst_d)
    allocate(this%Rbx_h(ntotbead))
    allocate(this%Rby_h(ntotbead))
    allocate(this%Rbz_h(ntotbead))

  end subroutine init_verlet_t

  subroutine print_ncps(this)

    class(evverlet_cu_t),intent(inout) :: this
    character(len=32) :: vlt_mode

    print *
    print '(" Initial number of cells for EV verlet calculations on device: ")'
    print '(3(i10,1x))',this%ncps

  end subroutine print_ncps

  subroutine print_mbpc(this)

    class(evverlet_cu_t),intent(inout) :: this
    character(len=32) :: vlt_mode

    print *
    print '(" Maximum number of beads per cell for EV verlet on device: ")'
    print '(i10,1x)',this%mbpc
    print '(" Note that it has to be smaller than maxThreadsperBlock, see above. ")'
    print '(" Note that I am choosing this number for the number of neighboring cells. ")'
    print '(" This is a risky choice and the user needs to make sure that the results ")'
    print '(" are not dependent on the value of cll-dns-ev. ")'

  end subroutine print_mbpc

  integer function get_nct(this)

    class(evverlet_cu_t),intent(inout) :: this
    get_nct=this%nct

  end function get_nct

  integer function get_mbpc(this)

    class(evverlet_cu_t),intent(inout) :: this
    get_mbpc=this%mbpc

  end function get_mbpc

  !> Initializes the cell list
  !! \param rc The cutoff radius
  !! \param bs The dimension of the box
  subroutine init_clllst(this,rc,bs,ntotbead,nlst_d)

    use :: verlet_mod, only: shifts,j_clx,j_cly,j_clz,j_cll
    use :: flow_mod, only: FlowType
!    use :: inp_smdlt, only: ntotbead
    use :: arry_mod, only: print_vector,print_matrix

    class(evverlet_cu_t),intent(inout) :: this
    real(wp),intent(in) :: rc,bs(3)
    integer,intent(in) :: ntotbead
    integer,device,allocatable,intent(inout) :: nlst_d(:,:)
    integer :: clx,cly,clz,cll,czNxNy,cyNx
    real(wp) :: ncpsl(3)

#ifdef Debuge_sequence
    write(*,*) "module:evverlet_cumod:init_clllst"
#endif

    ncpsl=this%ncps

    select case (FlowType)
      case ('Equil')
        this%ncps(:)=bs(:)/rc
      case ('PSF')
        this%ncps(1)=bs(1)/(sqrt(2._wp)*rc)
        this%ncps(2:3)=bs(2:3)/rc
      case ('PEF')
        this%ncps(1)=bs(1)/(sqrt(10._wp)*rc/3)
        this%ncps(2:3)=bs(2:3)/rc
    end select
    this%cll_sz(1:3)=bs(1:3)/this%ncps(1:3)
    this%nct=this%ncps(1)*this%ncps(2)*this%ncps(3)
    this%cll_vol=bs(1)*bs(2)*bs(3)/this%nct

    ! determined based on the number of warps
    this%mbpc=ceiling(this%cll_vol*cll_dns_ev/32)*32
    this%mbpct=this%mbpc*nnc

    print*,'mpc',this%mbpc,this%mbpct

    if (allocated(this%binc)) deallocate(this%binc)
    allocate(this%binc(this%nct,this%mbpc))
    if (allocated(this%binc_d)) deallocate(this%binc_d)
    allocate(this%binc_d(this%nct,this%mbpc))

    if (any(this%ncps /= ncpsl)) then

      if (allocated(this%head)) deallocate(this%head)
      if (allocated(this%nclst)) deallocate(this%nclst)
      if (allocated(this%nclst_d)) deallocate(this%nclst_d)

      allocate(this%head(this%nct))
      allocate(this%nclst(this%nct,nnc))
      allocate(this%nclst_d(this%nct,nnc))


      do clz=0, this%ncps(3)-1
        czNxNy=clz*this%ncps(1)*this%ncps(2)
        do cly=0, this%ncps(2)-1
          cyNx=cly*this%ncps(1)
          do clx=0, this%ncps(1)-1
            cll=czNxNy+cyNx+clx+1
            j_clx=clx+shifts(:,1)
            j_cly=cly+shifts(:,2)
            j_clz=clz+shifts(:,3)
            j_clx=modulo(j_clx,this%ncps(1))
            j_cly=modulo(j_cly,this%ncps(2))
            j_clz=modulo(j_clz,this%ncps(3))
            j_cll=j_clz*this%ncps(1)*this%ncps(2)+j_cly*this%ncps(1)+j_clx+1
            this%nclst(cll,:)=j_cll

          end do ! clx
        end do ! cly
      end do ! clz

      this%nclst_d=this%nclst

    end if

    ! note that I am using a risky choice of this%mbpc instead of this%mbpct
    ! the user needs to check if the results are dependent on the choice of cll-dns-ev
    if (allocated(nlst_d)) deallocate(nlst_d)
    allocate(nlst_d(this%mbpc,ntotbead))


  end subroutine init_clllst

  !> Constructs the cell list
  !! \param Rbx x-coordinate of the position vector
  !! \param Rby y-coordinate of the position vector
  !! \param Rbz z-coordinate of the position vector
  subroutine cnstr_nablst(this,Rbx_d,Rby_d,Rbz_d,itime,ntb,ntbx3,rc,bs,nn_d,nlst_d)

    use :: arry_mod, only: print_vector,print_matrix

    class(evverlet_cu_t),intent(inout) :: this
    real(wp),device,intent(in),target :: Rbx_d(:)
    real(wp),device,intent(in),target :: Rby_d(:)
    real(wp),device,intent(in),target :: Rbz_d(:)
    integer,intent(in) :: ntb,ntbx3,itime
    real(wp),intent(in) :: rc,bs(3)
    integer,device,intent(inout) :: nn_d(:)
    integer,device,intent(inout),contiguous :: nlst_d(:,:)
    integer,allocatable :: nn_h(:)
    integer,allocatable :: nlst_h(:,:)
    real(wp) :: bsx,bsy,bsz
    integer :: ierr,r,nbytes,ib,mbb

#ifdef Debuge_sequence
    write(*,*) "module:evverlet_cumod:init_nablst"
#endif

    ! unfortunately we need to transfer the positions for now
    ! but fortunately it is only done every once a while ...
    ! print*,'how often ev',itime
    this%Rbx_h=Rbx_d
    this%Rby_h=Rby_d
    this%Rbz_h=Rbz_d
    call this%cnstr_cll(this%Rbx_h,this%Rby_h,this%Rbz_h,itime,ntb,ntbx3)

    this%binc_d=this%binc
    bsx=bs(1)
    bsy=bs(2)
    bsz=bs(3)
    Rbx_tex => Rbx_d
    Rby_tex => Rby_d
    Rbz_tex => Rbz_d

    ! print*,'nct',this%nct,this%mbpc,this%num_int

    ! total number of bytes for shared memory usage in the next cuda kernel
    nbytes=(4+3*8)*this%mbpc

    call cnstr_nab_d <<< this%nct,this%mbpc,nbytes >>> (this%binc_d,this%nclst_d,nnc,rc,bsx,bsy,bsz,&
      nn_d,nlst_d,ntb,this%mbpct,Rbx_d,Rby_d,Rbz_d)
    ! r = cudathreadsynchronize()

    ! allocate(nn_h(ntb),nlst_h(this%mbpc,ntb))
    ! nn_h=nn_d
    ! nlst_h=nlst_d
    ! this%binc=this%binc_d
    ! call print_matrix(this%binc(:,:),'binc')
    ! call print_vector(nn_h,'nnh')
    ! call print_matrix(nlst_h,'nlsth')

! stop

    ! this%binc=this%binc_d
    ! print*,'this',this%binc(1,1)

    ierr = cudaGetLastError()
    if (ierr /= cudaSuccess) then
      print '(" cnstr neighbor for ev error: ",a)', cudaGetErrorString(ierr)
      print '(" cll-dns-ev might be too small ")'
      print '(" Maybe mbpc is greater than maxThreadsperBlock. ")'
      print '(" If so, either increase box size or decrease rc. ")'
      stop
    endif

    ! nn_test=nn_d
    ! nlst_test=nlst_d
    ! vallst_test=vallst_d
    ! call print_vector(nn_test,'nn_test')
    ! do ib=1,ntb
    ! print*,'ib',ib,rc**2
    ! call print_vector(nlst_test(1:nn_test(ib),ib),'nlst')
    ! call print_vector(vallst_test(1:nn_test(ib),ib),'vallst')
    ! enddo

  end subroutine cnstr_nablst

  !> Constructs the cell list
  !! \param Rbx x-coordinate of the position vector
  !! \param Rby y-coordinate of the position vector
  !! \param Rbz z-coordinate of the position vector
  subroutine cnstr_clllst(this,Rbx,Rby,Rbz,itime,ntotbead,ntotbeadx3)

    use :: arry_mod, only: print_vector,print_matrix

    class(evverlet_cu_t),intent(inout) :: this
    real(wp),intent(in) :: Rbx(:)
    real(wp),intent(in) :: Rby(:)
    real(wp),intent(in) :: Rbz(:)
    integer,intent(in) :: ntotbead,ntotbeadx3
    integer :: i,clx,cly,clz,cll,itime,j

#ifdef Debuge_sequence
    write(*,*) "module:evverlet_cumod:cnstr_clllst"
#endif

    this%head=0
    this%binc=0

    do i=1, ntotbead

      clx=int(Rbx(i)/this%cll_sz(1))
      cly=int(Rby(i)/this%cll_sz(2))
      clz=int(Rbz(i)/this%cll_sz(3))

      ! if the bead is exactly on the boundary
      if (clx == this%ncps(1)) clx=clx-1
      if (cly == this%ncps(2)) cly=cly-1
      if (clz == this%ncps(3)) clz=clz-1

      cll=clz*this%ncps(1)*this%ncps(2)+cly*this%ncps(1)+clx+1

      ! the number of beads (occupants) of cell cll
      this%head(cll)=this%head(cll)+1

      if (this%head(cll) >= this%mbpc) then
        print '(" Error: cll-dns-ev is too small from evverlet_cumod. ")'
        stop
      endif

      ! the bead index correspoding to bead this%head(cll) for cell cll

      this%binc(cll,this%head(cll))=i

    end do
    ! max occupancy of cells
    this%mocc=maxval(this%head)

    ! print*,'maxocc',this%mocc,this%mbpc

   ! print *,'mocc',this%mocc
   ! call print_vector(this%head,'newhead')
   ! call print_matrix(this%binc(:,1:5),'newbinc')

  end subroutine cnstr_clllst

  !> Constructs the neighbor list
  !! \param Rbx x-coordinate of the position vector
  !! \param Rby y-coordinate of the position vector
  !! \param Rbz z-coordinate of the position vector
  !! \param bs the dimension of the box
  !! \param invbs the inverse of box dimensions
  !! \param nlst The neighbor list
  ! attributes(global) subroutine cnstr_nab_d(binc,nclst,nnc,rc,bsx,bsy,bsz,nn,nlst,ntb,vallst)
  attributes(global) subroutine cnstr_nab_d(binc,nclst,nnc,rc,bsx,bsy,bsz,nn,nlst,ntb,mbpct,&
    Rbx,Rby,Rbz)

    !    use :: inp_smdlt, only: ntotbead,ntotbeadx3
    use :: flow_cumod, only: FlowType_d,PSF,PEF
    use :: trsfm_cumod, only: eps_m_d,tanb_d,sinth_d,costh_d

    integer,device :: binc(gridDim%x,blockDim%x)
    integer,device :: nclst(gridDim%x,nnc)
    integer,value :: nnc,ntb,mbpct
    real(wp),device :: Rbx(ntb),Rby(ntb),Rbz(ntb)

    real(wp),value :: rc,bsx,bsy,bsz
    integer,device :: nn(ntb)

    ! note that i am using a risky choice of mbpc instead of mbpct
    ! the user needs to check if the results are dependent on cll-dns-hi
    integer,device :: nlst(blockDim%x,ntb)
    ! integer,device :: nlst(mbpct,ntb)
    ! real(wp),device :: vallst(mbpct,ntb)

    integer,shared :: beadj_tmp(blockDim%x)
    real(wp),shared :: rjx_tmp(blockDim%x)
    real(wp),shared :: rjy_tmp(blockDim%x)
    real(wp),shared :: rjz_tmp(blockDim%x)
    real(wp) :: ri(3),rijx,rijy,rijytmp,rijz,rijsq
    integer :: nab,cll,beadi,jb,nabcll

#ifdef Debuge_sequence
    write(*,*) "module:evverlet_cumod:cnstr_nab_d"
#endif

    beadi=binc(blockIdx%x,threadIdx%x)
    if (beadi > ntb .or. beadi <= 0) return

    nab=0
    if (beadi /= 0) then
      ri(1)=Rbx_tex(beadi)
      ri(2)=Rby_tex(beadi)
      ri(3)=Rbz_tex(beadi)
    endif
    ! ri(1)=Rbx(beadi)
    ! ri(2)=Rby(beadi)
    ! ri(3)=Rbz(beadi)

    ! print*,'tid',threadIdx%x,blockDim%x

    do cll=1, nnc

      ! the neighboring cell index
      nabcll=nclst(blockIdx%x,cll)
      ! print*,'nabcll',blockIdx%x,nabcll

      ! populating the shared memory variables with all threads of this block
      beadj_tmp(threadIdx%x)=binc(nabcll,threadIdx%x)
      if (beadj_tmp(threadIdx%x) /= 0) then
        rjx_tmp(threadIdx%x)=Rbx_tex(beadj_tmp(threadIdx%x))
        rjy_tmp(threadIdx%x)=Rby_tex(beadj_tmp(threadIdx%x))
        rjz_tmp(threadIdx%x)=Rbz_tex(beadj_tmp(threadIdx%x))
      endif
      ! rjx_tmp(threadIdx%x)=Rbx(beadj_tmp(threadIdx%x))
      ! rjy_tmp(threadIdx%x)=Rby(beadj_tmp(threadIdx%x))
      ! rjz_tmp(threadIdx%x)=Rbz(beadj_tmp(threadIdx%x))

      ! Wait until all elements of the shared arrays are filled
      call syncthreads()

      ! take care of beadi
      if (beadi /= 0) then

        jblp: do jb=1, blockDim%x

          if (beadj_tmp(jb) == 0) then
            cycle jblp
          endif

          rijx=ri(1)-rjx_tmp(jb)
          rijy=ri(2)-rjy_tmp(jb)
          rijz=ri(3)-rjz_tmp(jb)
          ! Minimum Image Covention:
          rijx=rijx-nint(rijx/bsx)*bsx
          rijy=rijy-nint(rijy/bsy)*bsy
          rijz=rijz-nint(rijz/bsz)*bsz

          if (FlowType_d == PSF) then
            rijx=rijx+eps_m_d*rijy
          elseif (FlowType_d == PEF) then
            rijytmp=rijy
            rijx=rijx+tanb_d*rijytmp
            rijy=sinth_d*rijx+costh_d*rijytmp
            rijx=costh_d*rijx-sinth_d*rijytmp
          endif

          rijsq=rijx*rijx+rijy*rijy+rijz*rijz

          if ( (rijsq <= rc*rc) .and. (beadj_tmp(jb) /= beadi) ) then

            ! print*,'beads',beadi,beadj_tmp(jb),threadIdx%x,blockIdx%x
            nab=nab+1

            if (nab > blockDim%x) then
              stop 'Error!!: nab is large in ev'
            endif
            ! the nab's neighboring bead index for beadi
            nlst(nab,beadi)=beadj_tmp(jb)
            ! vallst(nab,beadi)=rijsq
          endif

        enddo jblp

      endif

      ! Synchronize to make sure all threads are done with the shared arrays before
      ! overwriting them in the next iteration of the cll loop
      call syncthreads()

    end do ! cll

    ! number of neighboring beads for beadi correspoding to threadIdx%x of blockIdx%x
    if (beadi /= 0) then
      nn(beadi)=nab
    endif

    ! if (nab > blockDim%x) then
    !   stop
    ! endif
    ! print*,'beadi',blockIdx%x,threadIdx%x,beadi,nn(beadi)

  end subroutine cnstr_nab_d


  !> Destructor for  verlet type
  subroutine del_verlet_t(this)

    type(evverlet_cu_t),intent(inout) :: this

    deallocate(this%Rbx_h,this%Rby_h,this%Rbz_h)

  end subroutine del_verlet_t

  subroutine del_evverlet_d()

  end subroutine del_evverlet_d

end module evverlet_cumod
